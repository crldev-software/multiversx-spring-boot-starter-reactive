plugins {
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java-library'
    id 'jacoco'
    id "io.freefair.lombok" version "6.1.0"
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group = 'io.ezalabs'
sourceCompatibility = '17'
setArchivesBaseName('multiversx-spring-boot-starter-reactive')
setVersion('1.2.1')

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.20.0'
        }
    }
}

dependencies {

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '3.1.4'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '3.1.0'

    implementation group: 'org.bouncycastle', name: 'bcmail-jdk15on', version: '1.70'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
    implementation group: 'org.bouncycastle', name: 'bcprov-ext-jdk15on', version: '1.70'
    implementation group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.16.2'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '3.1.0'
    testImplementation 'io.projectreactor:reactor-test:3.5.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.3.1'
}

def rootPackage = 'io.ezalabs.multiversxspringbootstarterreactive'

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.8

                excludes = [
                        rootPackage + '.error.*',
                        rootPackage + '.api.model.*',
                        rootPackage + '.util.MnemonicsUtils.KeyAndChainCode',
                        rootPackage + '.MxNetworkAutoConfiguration',
                        rootPackage + '.TransactionSenderServiceAutoconfiguration',
                        rootPackage + '.MxClientAutoConfiguration',
                        rootPackage + '.MxInteractorAutoConfiguration',
                        rootPackage + '.interactor.WrappedResponses',
                        rootPackage + '.config.constants.*',
                        rootPackage + '.config.MxClientConfig',
                        rootPackage + '.config.MxNetworkConfigSupplier',
                ]
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

test {
    useJUnitPlatform()
    finalizedBy(jacocoTestCoverageVerification)
}

jacocoTestReport {
    dependsOn test
}

tasks.register('javadocJar', Jar) {
    classifier('javadoc')
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    classifier('sources')
    from sourceSets.main.delombokTask
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact javadocJar
            artifact sourcesJar

            pom {
                name.set('MultiversX Spring Boot Starter Reactive')
                description.set('A SpringBoot Starter solution designed to ensure easy and efficient integration with the MultiversX Network using a Reactive API layer.')
                url.set('https://github.com/ezalabs/multiversx-spring-boot-starter-reactive')
                licenses {
                    license {
                        name.set("MIT")
                        url.set("https://github.com/ezalabs/multiversx-spring-boot-starter-reactive/blob/main/LICENSE")
                    }
                }
                developers {
                    developer {
                        id.set('carlo_stanciu')
                        name.set('Carlo Stanciu @ ezalabs.io')
                        email.set('carlo@ezalabs.io')
                    }
                }
                scm {
                    connection.set('scm:git:git://github.com/ezalabs/multiversx-spring-boot-starter-reactive.git')
                    developerConnection.set('scm:git:git://github.com/ezalabs/multiversx-spring-boot-starter-reactive.git')
                    url.set('https://github.com/ezalabs/multiversx-spring-boot-starter-reactive')
                }
            }
        }
    }
}

def decodeBase64 = { String value -> new String(Base64.getDecoder().decode(value == null ? "" : value)) }

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            username.set(decodeBase64(System.getenv("OSSRH_USER")))
            password.set(decodeBase64(System.getenv("OSSRH_PASSWORD")))
        }
    }
}

signing {
    def key = decodeBase64(System.getenv("SIGNING_KEY"))
    def password = decodeBase64(System.getenv("SIGNING_PASSWORD"))

    useInMemoryPgpKeys(key, password)
    sign publishing.publications.mavenJava
}
